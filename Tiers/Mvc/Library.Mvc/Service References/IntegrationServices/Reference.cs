//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.Threading.Tasks;

namespace Library.Mvc.IntegrationServices {
    [DebuggerStepThrough()]
    [GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="IntegrationInputDto", Namespace="http://schemas.datacontract.org/2004/07/Library.Business.Services.Integration.Dto" +
        "s")]
    [Serializable()]
    public partial class IntegrationInputDto : object, IExtensibleDataObject, INotifyPropertyChanged {
        
        [NonSerialized()]
        private ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private IntegrationDto IntegrationDtoField;
        
        [Browsable(false)]
        public ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public IntegrationDto IntegrationDto {
            get {
                return this.IntegrationDtoField;
            }
            set {
                if ((ReferenceEquals(this.IntegrationDtoField, value) != true)) {
                    this.IntegrationDtoField = value;
                    this.RaisePropertyChanged("IntegrationDto");
                }
            }
        }
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [DebuggerStepThrough()]
    [GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="IntegrationDto", Namespace="http://schemas.datacontract.org/2004/07/Library.Business.Services.Integration.Dto" +
        "s")]
    [Serializable()]
    public partial class IntegrationDto : object, IExtensibleDataObject, INotifyPropertyChanged {
        
        [NonSerialized()]
        private ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private string FilePathField;
        
        [Browsable(false)]
        public ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public string FilePath {
            get {
                return this.FilePathField;
            }
            set {
                if ((ReferenceEquals(this.FilePathField, value) != true)) {
                    this.FilePathField = value;
                    this.RaisePropertyChanged("FilePath");
                }
            }
        }
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [DebuggerStepThrough()]
    [GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="AuthorInputDto", Namespace="http://schemas.datacontract.org/2004/07/Library.Business.Services.Integration.Dto" +
        "s")]
    [Serializable()]
    public partial class AuthorInputDto : object, IExtensibleDataObject, INotifyPropertyChanged {
        
        [NonSerialized()]
        private ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private AuthorDto AuthorDtoField;
        
        [Browsable(false)]
        public ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public AuthorDto AuthorDto {
            get {
                return this.AuthorDtoField;
            }
            set {
                if ((ReferenceEquals(this.AuthorDtoField, value) != true)) {
                    this.AuthorDtoField = value;
                    this.RaisePropertyChanged("AuthorDto");
                }
            }
        }
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [DebuggerStepThrough()]
    [GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="AuthorDto", Namespace="http://schemas.datacontract.org/2004/07/Library.Business.Services.Integration.Dto" +
        "s")]
    [Serializable()]
    public partial class AuthorDto : object, IExtensibleDataObject, INotifyPropertyChanged {
        
        [NonSerialized()]
        private ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private string NameField;
        
        [OptionalField()]
        private int ValueField;
        
        [Browsable(false)]
        public ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [DataMember()]
        public int Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [DebuggerStepThrough()]
    [GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="PublisherInputDto", Namespace="http://schemas.datacontract.org/2004/07/Library.Business.Services.Integration.Dto" +
        "s")]
    [Serializable()]
    public partial class PublisherInputDto : object, IExtensibleDataObject, INotifyPropertyChanged {
        
        [NonSerialized()]
        private ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private string PublisherNameField;
        
        [OptionalField()]
        private string SeriesNameField;
        
        [Browsable(false)]
        public ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public string PublisherName {
            get {
                return this.PublisherNameField;
            }
            set {
                if ((ReferenceEquals(this.PublisherNameField, value) != true)) {
                    this.PublisherNameField = value;
                    this.RaisePropertyChanged("PublisherName");
                }
            }
        }
        
        [DataMember()]
        public string SeriesName {
            get {
                return this.SeriesNameField;
            }
            set {
                if ((ReferenceEquals(this.SeriesNameField, value) != true)) {
                    this.SeriesNameField = value;
                    this.RaisePropertyChanged("SeriesName");
                }
            }
        }
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [GeneratedCode("System.ServiceModel", "4.0.0.0")]
    [ServiceContract(Namespace="com.sense.business.Services", ConfigurationName="IntegrationServices.IntegrationService")]
    public interface IntegrationService {
        
        [OperationContract(Action="com.sense.business.Services/IntegrationService/Import", ReplyAction="com.sense.business.Services/IntegrationService/ImportResponse")]
        bool Import(IntegrationInputDto input);
        
        [OperationContract(Action="com.sense.business.Services/IntegrationService/Import", ReplyAction="com.sense.business.Services/IntegrationService/ImportResponse")]
        Task<bool> ImportAsync(IntegrationInputDto input);
        
        [OperationContract(Action="com.sense.business.Services/IntegrationService/CreateAuthor", ReplyAction="com.sense.business.Services/IntegrationService/CreateAuthorResponse")]
        bool CreateAuthor(AuthorInputDto input);
        
        [OperationContract(Action="com.sense.business.Services/IntegrationService/CreateAuthor", ReplyAction="com.sense.business.Services/IntegrationService/CreateAuthorResponse")]
        Task<bool> CreateAuthorAsync(AuthorInputDto input);
        
        [OperationContract(Action="com.sense.business.Services/IntegrationService/CreatePublisher", ReplyAction="com.sense.business.Services/IntegrationService/CreatePublisherResponse")]
        bool CreatePublisher(PublisherInputDto input);
        
        [OperationContract(Action="com.sense.business.Services/IntegrationService/CreatePublisher", ReplyAction="com.sense.business.Services/IntegrationService/CreatePublisherResponse")]
        Task<bool> CreatePublisherAsync(PublisherInputDto input);
    }
    
    [GeneratedCode("System.ServiceModel", "4.0.0.0")]
    public interface IntegrationServiceChannel : IntegrationService, IClientChannel {
    }
    
    [DebuggerStepThrough()]
    [GeneratedCode("System.ServiceModel", "4.0.0.0")]
    public partial class IntegrationServiceClient : ClientBase<IntegrationService>, IntegrationService {
        
        public IntegrationServiceClient() {
        }
        
        public IntegrationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public IntegrationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IntegrationServiceClient(string endpointConfigurationName, EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IntegrationServiceClient(Binding binding, EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Import(IntegrationInputDto input) {
            return base.Channel.Import(input);
        }
        
        public Task<bool> ImportAsync(IntegrationInputDto input) {
            return base.Channel.ImportAsync(input);
        }
        
        public bool CreateAuthor(AuthorInputDto input) {
            return base.Channel.CreateAuthor(input);
        }
        
        public Task<bool> CreateAuthorAsync(AuthorInputDto input) {
            return base.Channel.CreateAuthorAsync(input);
        }
        
        public bool CreatePublisher(PublisherInputDto input) {
            return base.Channel.CreatePublisher(input);
        }
        
        public Task<bool> CreatePublisherAsync(PublisherInputDto input) {
            return base.Channel.CreatePublisherAsync(input);
        }
    }
}
