//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Runtime.Serialization;

namespace Library.Mvc.Service_References.ItemProviderServices {
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="AuthorOutputDto", Namespace="http://schemas.datacontract.org/2004/07/Library.Business.Services.Provider.Dtos")]
    [Serializable()]
    public partial class AuthorOutputDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private AuthorDto[] AuthorDtosField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public AuthorDto[] AuthorDtos {
            get {
                return this.AuthorDtosField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorDtosField, value) != true)) {
                    this.AuthorDtosField = value;
                    this.RaisePropertyChanged("AuthorDtos");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="AuthorDto", Namespace="http://schemas.datacontract.org/2004/07/Library.Business.Services.Provider.Dtos")]
    [Serializable()]
    public partial class AuthorDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private string NameField;
        
        [OptionalField()]
        private int ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [DataMember()]
        public int Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="PublisherOutputDto", Namespace="http://schemas.datacontract.org/2004/07/Library.Business.Services.Provider.Dtos")]
    [Serializable()]
    public partial class PublisherOutputDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private PublisherDto[] PublisherDtosField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public PublisherDto[] PublisherDtos {
            get {
                return this.PublisherDtosField;
            }
            set {
                if ((object.ReferenceEquals(this.PublisherDtosField, value) != true)) {
                    this.PublisherDtosField = value;
                    this.RaisePropertyChanged("PublisherDtos");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="PublisherDto", Namespace="http://schemas.datacontract.org/2004/07/Library.Business.Services.Provider.Dtos")]
    [Serializable()]
    public partial class PublisherDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private string NameField;
        
        [OptionalField()]
        private int ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [DataMember()]
        public int Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="GenreOutputDto", Namespace="http://schemas.datacontract.org/2004/07/Library.Business.Services.Provider.Dtos")]
    [Serializable()]
    public partial class GenreOutputDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private GenreDto[] GenreDtosField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public GenreDto[] GenreDtos {
            get {
                return this.GenreDtosField;
            }
            set {
                if ((object.ReferenceEquals(this.GenreDtosField, value) != true)) {
                    this.GenreDtosField = value;
                    this.RaisePropertyChanged("GenreDtos");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="GenreDto", Namespace="http://schemas.datacontract.org/2004/07/Library.Business.Services.Provider.Dtos")]
    [Serializable()]
    public partial class GenreDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private string NameField;
        
        [OptionalField()]
        private int ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [DataMember()]
        public int Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="SeriesOutputDto", Namespace="http://schemas.datacontract.org/2004/07/Library.Business.Services.Provider.Dtos")]
    [Serializable()]
    public partial class SeriesOutputDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private SeriesDto[] SeriesDtosField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public SeriesDto[] SeriesDtos {
            get {
                return this.SeriesDtosField;
            }
            set {
                if ((object.ReferenceEquals(this.SeriesDtosField, value) != true)) {
                    this.SeriesDtosField = value;
                    this.RaisePropertyChanged("SeriesDtos");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="SeriesDto", Namespace="http://schemas.datacontract.org/2004/07/Library.Business.Services.Provider.Dtos")]
    [Serializable()]
    public partial class SeriesDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private string NameField;
        
        [OptionalField()]
        private int ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [DataMember()]
        public int Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="ShelfOutputDto", Namespace="http://schemas.datacontract.org/2004/07/Library.Business.Services.Provider.Dtos")]
    [Serializable()]
    public partial class ShelfOutputDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private ShelfDto[] ShelfDtosField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public ShelfDto[] ShelfDtos {
            get {
                return this.ShelfDtosField;
            }
            set {
                if ((object.ReferenceEquals(this.ShelfDtosField, value) != true)) {
                    this.ShelfDtosField = value;
                    this.RaisePropertyChanged("ShelfDtos");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="ShelfDto", Namespace="http://schemas.datacontract.org/2004/07/Library.Business.Services.Provider.Dtos")]
    [Serializable()]
    public partial class ShelfDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private string NameField;
        
        [OptionalField()]
        private int ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [DataMember()]
        public int Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="RackOutputDto", Namespace="http://schemas.datacontract.org/2004/07/Library.Business.Services.Provider.Dtos")]
    [Serializable()]
    public partial class RackOutputDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private RackDto[] RackDtosField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public RackDto[] RackDtos {
            get {
                return this.RackDtosField;
            }
            set {
                if ((object.ReferenceEquals(this.RackDtosField, value) != true)) {
                    this.RackDtosField = value;
                    this.RaisePropertyChanged("RackDtos");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="RackDto", Namespace="http://schemas.datacontract.org/2004/07/Library.Business.Services.Provider.Dtos")]
    [Serializable()]
    public partial class RackDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private string NameField;
        
        [OptionalField()]
        private int ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [DataMember()]
        public int Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="com.sense.business.Services", ConfigurationName="ItemProviderServices.ItemProviderService")]
    public interface ItemProviderService {
        
        [System.ServiceModel.OperationContractAttribute(Action="com.sense.business.Services/ItemProviderService/Authors", ReplyAction="com.sense.business.Services/ItemProviderService/AuthorsResponse")]
        AuthorOutputDto Authors();
        
        [System.ServiceModel.OperationContractAttribute(Action="com.sense.business.Services/ItemProviderService/Authors", ReplyAction="com.sense.business.Services/ItemProviderService/AuthorsResponse")]
        System.Threading.Tasks.Task<AuthorOutputDto> AuthorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="com.sense.business.Services/ItemProviderService/Publishers", ReplyAction="com.sense.business.Services/ItemProviderService/PublishersResponse")]
        PublisherOutputDto Publishers();
        
        [System.ServiceModel.OperationContractAttribute(Action="com.sense.business.Services/ItemProviderService/Publishers", ReplyAction="com.sense.business.Services/ItemProviderService/PublishersResponse")]
        System.Threading.Tasks.Task<PublisherOutputDto> PublishersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="com.sense.business.Services/ItemProviderService/Genres", ReplyAction="com.sense.business.Services/ItemProviderService/GenresResponse")]
        GenreOutputDto Genres();
        
        [System.ServiceModel.OperationContractAttribute(Action="com.sense.business.Services/ItemProviderService/Genres", ReplyAction="com.sense.business.Services/ItemProviderService/GenresResponse")]
        System.Threading.Tasks.Task<GenreOutputDto> GenresAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="com.sense.business.Services/ItemProviderService/Series", ReplyAction="com.sense.business.Services/ItemProviderService/SeriesResponse")]
        SeriesOutputDto Series();
        
        [System.ServiceModel.OperationContractAttribute(Action="com.sense.business.Services/ItemProviderService/Series", ReplyAction="com.sense.business.Services/ItemProviderService/SeriesResponse")]
        System.Threading.Tasks.Task<SeriesOutputDto> SeriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="com.sense.business.Services/ItemProviderService/Shelfs", ReplyAction="com.sense.business.Services/ItemProviderService/ShelfsResponse")]
        ShelfOutputDto Shelfs();
        
        [System.ServiceModel.OperationContractAttribute(Action="com.sense.business.Services/ItemProviderService/Shelfs", ReplyAction="com.sense.business.Services/ItemProviderService/ShelfsResponse")]
        System.Threading.Tasks.Task<ShelfOutputDto> ShelfsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="com.sense.business.Services/ItemProviderService/Racks", ReplyAction="com.sense.business.Services/ItemProviderService/RacksResponse")]
        RackOutputDto Racks();
        
        [System.ServiceModel.OperationContractAttribute(Action="com.sense.business.Services/ItemProviderService/Racks", ReplyAction="com.sense.business.Services/ItemProviderService/RacksResponse")]
        System.Threading.Tasks.Task<RackOutputDto> RacksAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ItemProviderServiceChannel : ItemProviderService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ItemProviderServiceClient : System.ServiceModel.ClientBase<ItemProviderService>, ItemProviderService {
        
        public ItemProviderServiceClient() {
        }
        
        public ItemProviderServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ItemProviderServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ItemProviderServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ItemProviderServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public AuthorOutputDto Authors() {
            return base.Channel.Authors();
        }
        
        public System.Threading.Tasks.Task<AuthorOutputDto> AuthorsAsync() {
            return base.Channel.AuthorsAsync();
        }
        
        public PublisherOutputDto Publishers() {
            return base.Channel.Publishers();
        }
        
        public System.Threading.Tasks.Task<PublisherOutputDto> PublishersAsync() {
            return base.Channel.PublishersAsync();
        }
        
        public GenreOutputDto Genres() {
            return base.Channel.Genres();
        }
        
        public System.Threading.Tasks.Task<GenreOutputDto> GenresAsync() {
            return base.Channel.GenresAsync();
        }
        
        public SeriesOutputDto Series() {
            return base.Channel.Series();
        }
        
        public System.Threading.Tasks.Task<SeriesOutputDto> SeriesAsync() {
            return base.Channel.SeriesAsync();
        }
        
        public ShelfOutputDto Shelfs() {
            return base.Channel.Shelfs();
        }
        
        public System.Threading.Tasks.Task<ShelfOutputDto> ShelfsAsync() {
            return base.Channel.ShelfsAsync();
        }
        
        public RackOutputDto Racks() {
            return base.Channel.Racks();
        }
        
        public System.Threading.Tasks.Task<RackOutputDto> RacksAsync() {
            return base.Channel.RacksAsync();
        }
    }
}
