//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.Threading.Tasks;

namespace Library.Mvc.AuthenticationServices {
    [DebuggerStepThrough()]
    [GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="UserInputDto", Namespace="http://schemas.datacontract.org/2004/07/Library.Business.Services.Authentication." +
        "Dtos")]
    [Serializable()]
    public partial class UserInputDto : object, IExtensibleDataObject, INotifyPropertyChanged {
        
        [NonSerialized()]
        private ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private UserDto UserField;
        
        [Browsable(false)]
        public ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public UserDto User {
            get {
                return this.UserField;
            }
            set {
                if ((ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [DebuggerStepThrough()]
    [GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="UserDto", Namespace="http://schemas.datacontract.org/2004/07/Library.Business.Services.Authentication." +
        "Dtos")]
    [Serializable()]
    public partial class UserDto : object, IExtensibleDataObject, INotifyPropertyChanged {
        
        [NonSerialized()]
        private ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private string PasswordField;
        
        [OptionalField()]
        private string UsernameField;
        
        [Browsable(false)]
        public ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [DataMember()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [DebuggerStepThrough()]
    [GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="UserOutputDto", Namespace="http://schemas.datacontract.org/2004/07/Library.Business.Services.Authentication." +
        "Dtos")]
    [Serializable()]
    public partial class UserOutputDto : object, IExtensibleDataObject, INotifyPropertyChanged {
        
        [NonSerialized()]
        private ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private string GenderField;
        
        [OptionalField()]
        private Nullable<DateTime> LastLoginDateField;
        
        [OptionalField()]
        private string NameField;
        
        [OptionalField()]
        private string OccupationField;
        
        [Browsable(false)]
        public ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public string Gender {
            get {
                return this.GenderField;
            }
            set {
                if ((ReferenceEquals(this.GenderField, value) != true)) {
                    this.GenderField = value;
                    this.RaisePropertyChanged("Gender");
                }
            }
        }
        
        [DataMember()]
        public Nullable<DateTime> LastLoginDate {
            get {
                return this.LastLoginDateField;
            }
            set {
                if ((this.LastLoginDateField.Equals(value) != true)) {
                    this.LastLoginDateField = value;
                    this.RaisePropertyChanged("LastLoginDate");
                }
            }
        }
        
        [DataMember()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [DataMember()]
        public string Occupation {
            get {
                return this.OccupationField;
            }
            set {
                if ((ReferenceEquals(this.OccupationField, value) != true)) {
                    this.OccupationField = value;
                    this.RaisePropertyChanged("Occupation");
                }
            }
        }
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [GeneratedCode("System.ServiceModel", "4.0.0.0")]
    [ServiceContract(Namespace="com.sense.services.Services", ConfigurationName="AuthenticationServices.AuthService")]
    public interface AuthService {
        
        [OperationContract(Action="com.sense.services.Services/AuthService/Authenticate", ReplyAction="com.sense.services.Services/AuthService/AuthenticateResponse")]
        UserOutputDto Authenticate(UserInputDto input);
        
        [OperationContract(Action="com.sense.services.Services/AuthService/Authenticate", ReplyAction="com.sense.services.Services/AuthService/AuthenticateResponse")]
        Task<UserOutputDto> AuthenticateAsync(UserInputDto input);
    }
    
    [GeneratedCode("System.ServiceModel", "4.0.0.0")]
    public interface AuthServiceChannel : AuthService, IClientChannel {
    }
    
    [DebuggerStepThrough()]
    [GeneratedCode("System.ServiceModel", "4.0.0.0")]
    public partial class AuthServiceClient : ClientBase<AuthService>, AuthService {
        
        public AuthServiceClient() {
        }
        
        public AuthServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AuthServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthServiceClient(string endpointConfigurationName, EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthServiceClient(Binding binding, EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public UserOutputDto Authenticate(UserInputDto input) {
            return base.Channel.Authenticate(input);
        }
        
        public Task<UserOutputDto> AuthenticateAsync(UserInputDto input) {
            return base.Channel.AuthenticateAsync(input);
        }
    }
}
